{"version":3,"file":"static/js/156.778e82b7.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport {setContent} from \"../../utils/setContent\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n  const {getComic, getCharacter, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case \"comic\":\r\n        getComic(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess('confirmed'))\r\n        break;\r\n      case \"character\":\r\n        getCharacter(id)\r\n        .then(onDataLoaded)\r\n        .then(() => setProcess('confirmed'))\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting')\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n      setProcess('loading')\r\n      \r\n      try {\r\n        const response = await fetch(url, {method, body, headers});\r\n\r\n        if (!response.ok) {\r\n          throw new Error(response.status);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n        \r\n      } catch(e) {\r\n        setProcess('error')\r\n        throw e;\r\n      }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading')\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess}\r\n\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=8dc87586c41220020ff212b5e2226108\";\r\n  const _baseOffset = 210;\r\n  \r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n  \r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n    \r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 200)}...` : 'Нет описания для этого персонажа...',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homePage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      id: char.id,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComic);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComic(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComic = (comic) => {\r\n    return {\r\n      title: comic.title,\r\n      id: comic.id,\r\n      description: comic.description || \"Описание отсутствует\",\r\n      thumbnail: `${comic.thumbnail.path}.${comic.thumbnail.extension}`,\r\n      language: comic.textObjects[0]?.language || \"en-us\",\r\n      pageCount: comic.pageCount ? \r\n                `${comic.pageCount} pages` : \r\n                'Колличество страниц не известно',\r\n      price: comic.prices[0].price ? \r\n                `${comic.prices[0].price} $` :\r\n                 'Неизвестно',\r\n    }\r\n  }\r\n\r\n  return {\r\n          process,\r\n          setProcess, \r\n          getAllCharacters, \r\n          getCharacter, \r\n          clearError, \r\n          getAllComics, \r\n          getComic, \r\n          getCharacterByName\r\n        }\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nexport const setContent = (process, Component, data) => {\r\n  switch(process) {\r\n      case 'waiting':\r\n          return <Skeleton/>\r\n      case 'loading':\r\n          return <Spinner/>\r\n      case 'confirmed':\r\n          return <Component data={data} />;\r\n      case 'error':\r\n          return <ErrorMessage/>\r\n      default: \r\n          throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport const setContentWithNewLoadingData = (process, Component, newItemData) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Spinner/>\r\n        case 'loading':\r\n            return newItemData ? <Component/> : <Spinner/>\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","concat","slice","thumbnail","path","extension","homePage","urls","wiki","comics","items","_transformComic","comic","_comic$textObjects$","title","language","textObjects","pageCount","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName","Skeleton","Spinner","setContentWithNewLoadingData","newItemData"],"sourceRoot":""}
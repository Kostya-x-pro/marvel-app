{"version":3,"file":"static/js/801.6b8b1982.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/CharSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport {setContent} from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n   \r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 50000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000) // генерация случайного id в диапазоне апишки\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n        {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\">\r\n                    <div \r\n                    className=\"inner\"\r\n                    onClick={updateChar}\r\n                    >try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homePage, wiki} = data;\r\n    const styles = {\r\n        'objectFit': (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? 'contain' : 'cover'\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img \r\n                src={thumbnail} \r\n                alt={name}\r\n                style={styles} \r\n                className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homePage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { setContentWithNewLoadingData } from '../../utils/setContent';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n    \r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n    \r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList ]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnitem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition\r\n                    key={i} \r\n                    timeout={500}\r\n                    classNames={\"char__item\"}>\r\n                    <li \r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={(el => itemRefs.current[i] = el)}\r\n                        onClick={() => {\r\n                            props.onCharselected(item.id)\r\n                            focusOnitem(i)\r\n                        }}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContentWithNewLoadingData(process, () => renderItems(charList), newItemLoading)\r\n    }, [process]);\r\n        \r\n    return (\r\n        <div className=\"char__list\">\r\n        {elements}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{display: charEnded ? 'none' : 'block'}} \r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Валидация пропсов с помощью компонента propTypes (устанавливается как зависимость)\r\nCharList.propTypes = {\r\n    onCharselected: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import { Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {setContent} from '../../utils/setContent';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => setChar(char);\r\n\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homePage, wiki, comics} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle.objectFit = 'contain';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img \r\n                    src={thumbnail} \r\n                    alt={name}\r\n                    style={imgStyle}\r\n                    />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homePage} className=\"button button__main\">\r\n                            <div className=\"inner\">HOMEPAGE</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n             {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length === 0 ? 'Комиксы отсутствуют...' : null}\r\n                {\r\n                    comics.map((item, i) => {\r\n                    const comicId = item.resourceURI.slice(43);\r\n                            if (i > 9) return\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={`/comics/${comicId}`}>{item.name}</Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }         \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === \"loading\"}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n// ErrorBoundary НЕ ловит ошибки:\r\n// 1. которые происходят в нём самом\r\n// 2. которые происходят в обработчиках событий\r\n// 3. которые происходят в асинхронном коде\r\n// 4. серверный рендоринг\r\n\r\nclass ErrorBoundary extends Component{\r\n  state = {\r\n    error: false,\r\n  }\r\n  // Этот метод в отличии от componentDidCatch обновляет только \"state\"\r\n  // static getDerivedStateFromError(error) {\r\n  //   return {error: true};\r\n  // }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {  \r\n      return <ErrorMessage/>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../CharSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null)\r\n\r\n  const onCharselected = (id) => setChar(id);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n          <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n       <ErrorBoundary>\r\n          <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n          <ErrorBoundary>\r\n              <CharList onCharselected={onCharselected} />\r\n          </ErrorBoundary>\r\n          <div>\r\n            <ErrorBoundary>\r\n                <CharInfo charId={selectedChar}/>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <CharSearchForm/>\r\n            </ErrorBoundary>\r\n          </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting')\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n      setProcess('loading')\r\n      \r\n      try {\r\n        const response = await fetch(url, {method, body, headers});\r\n\r\n        if (!response.ok) {\r\n          throw new Error(response.status);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n        \r\n      } catch(e) {\r\n        setProcess('error')\r\n        throw e;\r\n      }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading')\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess}\r\n\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=8dc87586c41220020ff212b5e2226108\";\r\n  const _baseOffset = 210;\r\n  \r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n  \r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n    \r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 200)}...` : 'Нет описания для этого персонажа...',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homePage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      id: char.id,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComic);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComic(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComic = (comic) => {\r\n    return {\r\n      title: comic.title,\r\n      id: comic.id,\r\n      description: comic.description || \"Описание отсутствует\",\r\n      thumbnail: `${comic.thumbnail.path}.${comic.thumbnail.extension}`,\r\n      language: comic.textObjects[0]?.language || \"en-us\",\r\n      pageCount: comic.pageCount ? \r\n                `${comic.pageCount} pages` : \r\n                'Колличество страниц не известно',\r\n      price: comic.prices[0].price ? \r\n                `${comic.prices[0].price} $` :\r\n                 'Неизвестно',\r\n    }\r\n  }\r\n\r\n  return {\r\n          process,\r\n          setProcess, \r\n          getAllCharacters, \r\n          getCharacter, \r\n          clearError, \r\n          getAllComics, \r\n          getComic, \r\n          getCharacterByName\r\n        }\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nexport const setContent = (process, Component, data) => {\r\n  switch(process) {\r\n      case 'waiting':\r\n          return <Skeleton/>\r\n      case 'loading':\r\n          return <Spinner/>\r\n      case 'confirmed':\r\n          return <Component data={data} />;\r\n      case 'error':\r\n          return <ErrorMessage/>\r\n      default: \r\n          throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport const setContentWithNewLoadingData = (process, Component, newItemData) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Spinner/>\r\n        case 'loading':\r\n            return newItemData ? <Component/> : <Spinner/>\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homePage","wiki","styles","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","renderItems","arr","items","map","item","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","current","onCharselected","forEach","classList","remove","add","focus","TransitionGroup","component","elements","useMemo","setContentWithNewLoadingData","disabled","comics","_Fragment","comicId","resourceURI","slice","Link","to","concat","charId","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComic","comic","_comic$textObjects$","title","language","textObjects","pageCount","price","prices","res","getAllComics","getComic","Skeleton","Spinner","newItemData"],"sourceRoot":""}